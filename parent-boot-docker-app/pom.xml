<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <parent>
        <groupId>com.dell.cpsd.api-gateway</groupId>
        <artifactId>api-gateway-parent</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <groupId>com.dell.cpsd.api-gateway</groupId>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>parent-boot-docker-app</artifactId>
    <packaging>pom</packaging>
    <description>
        Choose me as your parent if you want to be a Spring Boot application that
        wants to be a Docker'ized during the build.
    </description>

    <properties>
        <use-docker-config-file>false</use-docker-config-file>
        <!-- use -DskipDocker=false on your command line to execute docker image build -->
        <skipDocker>true</skipDocker>
        <!-- Specifies the organization name to use for our Docker images. It's important that this not contain
             dots to avoid triggering registry hostname logic -->
        <dockerImage.org>cpsd</dockerImage.org>
        <dockerImage.tag>latest</dockerImage.tag>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <!-- Import dependency management from Spring Boot -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Camden.SR5</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <!--
                    The Docker plugin is configured generically here in the parent, but
                    application POMs still need to reference the plugin.

                    More docs about the plugin are available at:
                    https://github.com/spotify/docker-maven-plugin

                    The Spring Boot plugin also needs to be referenced and it is REQUIRED
                    that it be referenced BEFORE the docker plugin. That way the Boot-ified
                    jar gets built into the Docker image.

                    <build>
                        <plugins>
                            <plugin>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-maven-plugin</artifactId>
                            </plugin>
                            <plugin>
                                <groupId>com.spotify</groupId>
                                <artifactId>docker-maven-plugin</artifactId>
                            </plugin>
                        </plugins>
                    </build>

                    You can augment configuration specific to your application's Docker image
                    by including a <configuration> section, such as

                    <configuration>
                        <env>
                            <SPRING_CONFIG_URI>http://config-server:8888/config-server/</SPRING_CONFIG_URI>
                        </env>
                    </configuration>

                    -->
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${docker-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>build-image</id>
                            <phase>package</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                            <configuration>
                                <imageName>${dockerImage.org}-${project.artifactId}:${dockerImage.tag}</imageName>
                            </configuration>
                        </execution>
                        <execution>
                            <id>tag-image</id>
                            <phase>deploy</phase>
                            <goals>
                                <goal>tag</goal>
                            </goals>
                            <configuration>
                                <image>${dockerImage.org}-${project.artifactId}:${dockerImage.tag}</image>
                                <newName>${docker.registry}/${dockerImage.org}-${project.artifactId}:${dockerImage.tag}</newName>
                            </configuration>
                        </execution>
                        <execution>
                            <id>push-image</id>
                            <phase>deploy</phase>
                            <goals>
                                <goal>push</goal>
                            </goals>
                            <configuration>
                                <imageName>${docker.registry}/${dockerImage.org}-${project.artifactId}:${dockerImage.tag}</imageName>
                            </configuration>
                        </execution>
                    </executions>
                    <configuration>
                        <baseImage>openjdk:8</baseImage>
                        <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
                        <!-- copy the service's jar file from target into the root directory of the image -->
                        <resources>
                            <resource>
                                <targetPath>/</targetPath>
                                <directory>${project.build.directory}</directory>
                                <include>${project.build.finalName}.jar</include>
                            </resource>
                        </resources>
                        <useConfigFile>${use-docker-config-file}</useConfigFile>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <profile>
            <id>has-docker-config</id>
            <activation>
                <file>
                    <exists>${user.home}/.docker/config.json</exists>
                </file>
            </activation>
            <properties>
                <use-docker-config-file>true</use-docker-config-file>
            </properties>
        </profile>
    </profiles>
</project>
